#include \"config_manager.h\"\n#include <fstream>\n#include <sstream>\n#include <algorithm>\n#include <cctype>\n#include <cstdlib>\n\nConfigManager::ConfigManager() {\n    // Constructor implementation\n}\n\nConfigManager::~ConfigManager() {\n    // Destructor implementation\n}\n\nbool ConfigManager::load(const std::string& envFile) {\n    // Load from .env file\n    std::ifstream file(envFile);\n    if (file.is_open()) {\n        std::string line;\n        while (std::getline(file, line)) {\n            parseLine(line);\n        }\n        file.close();\n    }\n    \n    // Load from environment variables\n    // In a real implementation, you would iterate through all environment variables\n    // For now, we'll just load a few common ones\n    char* host = std::getenv(\"HOST\");\n    if (host) {\n        config_[\"HOST\"] = std::string(host);\n    }\n    \n    char* port = std::getenv(\"PORT\");\n    if (port) {\n        config_[\"PORT\"] = std::string(port);\n    }\n    \n    return true;\n}\n\nstd::string ConfigManager::get(const std::string& key, const std::string& defaultValue) const {\n    auto it = config_.find(key);\n    if (it != config_.end()) {\n        return it->second;\n    }\n    return defaultValue;\n}\n\nint ConfigManager::getInt(const std::string& key, int defaultValue) const {\n    auto it = config_.find(key);\n    if (it != config_.end()) {\n        try {\n            return std::stoi(it->second);\n        } catch (const std::exception&) {\n            // Conversion failed, return default value\n        }\n    }\n    return defaultValue;\n}\n\nbool ConfigManager::getBool(const std::string& key, bool defaultValue) const {\n    auto it = config_.find(key);\n    if (it != config_.end()) {\n        std::string value = it->second;\n        std::transform(value.begin(), value.end(), value.begin(), ::tolower);\n        \n        if (value == \"true\" || value == \"1\" || value == \"yes\" || value == \"on\") {\n            return true;\n        } else if (value == \"false\" || value == \"0\" || value == \"no\" || value == \"off\") {\n            return false;\n        }\n    }\n    return defaultValue;\n}\n\nvoid ConfigManager::parseLine(const std::string& line) {\n    // Skip empty lines and comments\n    if (line.empty() || line[0] == '#') {\n        return;\n    }\n    \n    // Find the '=' character\n    size_t pos = line.find('=');\n    if (pos != std::string::npos) {\n        std::string key = trim(line.substr(0, pos));\n        std::string value = trim(line.substr(pos + 1));\n        \n        // Remove quotes if present\n        if (!value.empty() && (value.front() == '\"' || value.front() == '\\'')) {\n            if (value.back() == value.front()) {\n                value = value.substr(1, value.length() - 2);\n            }\n        }\n        \n        config_[key] = value;\n    }\n}\n\nstd::string ConfigManager::trim(const std::string& str) const {\n    size_t first = str.find_first_not_of(' ');\n    if (first == std::string::npos) {\n        return \"\";\n    }\n    size_t last = str.find_last_not_of(' ');\n    return str.substr(first, (last - first + 1));\n}